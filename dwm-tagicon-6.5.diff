diff --git a/config.def.h b/config.def.h
index fb931a4..c9a0c00 100644
--- a/config.def.h
+++ b/config.def.h
@@ -5,8 +5,18 @@ static const unsigned int borderpx  = 1;        /* border pixel of windows */
 static const unsigned int snap      = 32;       /* snap pixel */
 static const int showbar            = 1;        /* 0 means no bar */
 static const int topbar             = 1;        /* 0 means bottom bar */
+
+/* winicon */
 #define ICONSIZE 16   /* icon size */
 #define ICONSPACING 5 /* space between icon and title */
+
+/* tagicon */
+static const Bool disablewinicon    = False;	/* True: disable winicon on the client section */
+static const Bool disabletagind     = True; 	/* True: disable that small rectangle that shows that a tag is occupied, if icon available */
+static const Bool overwritetag      = True; 	/* True: don't show tag (text) if icon is available */
+static const Bool tagiconatstart    = True; 	/* True: place at tag start, False: place at tag end */
+static const char tagiconsep[]      = ":";  	/* Separator between tag and icon */
+
 static const char *fonts[]          = { "monospace:size=10" };
 static const char dmenufont[]       = "monospace:size=10";
 static const char col_gray1[]       = "#222222";
diff --git a/dwm b/dwm
new file mode 100755
index 0000000..4536408
Binary files /dev/null and b/dwm differ
diff --git a/dwm.c b/dwm.c
index 8266ec6..895ec5d 100644
--- a/dwm.c
+++ b/dwm.c
@@ -277,6 +277,8 @@ static Window root, wmcheckwin;
 /* configuration, allows nested code to access above variables */
 #include "config.h"
 
+unsigned int tagw[LENGTH(tags)];
+
 /* compile-time check if all tags fit into an unsigned int bit array. */
 struct NumTags { char limitexceeded[LENGTH(tags) > 31 ? -1 : 1]; };
 
@@ -439,9 +441,9 @@ buttonpress(XEvent *e)
 	}
 	if (ev->window == selmon->barwin) {
 		i = x = 0;
-		do
-			x += TEXTW(tags[i]);
-		while (ev->x >= x && ++i < LENGTH(tags));
+		do {
+			x += tagw[i];
+		} while (ev->x >= x && ++i < LENGTH(tags));
 		if (i < LENGTH(tags)) {
 			click = ClkTagBar;
 			arg.ui = 1 << i;
@@ -707,8 +709,12 @@ drawbar(Monitor *m)
 	int x, w, tw = 0;
 	int boxs = drw->fonts->h / 9;
 	int boxw = drw->fonts->h / 6 + 2;
-	unsigned int i, occ = 0, urg = 0;
+	unsigned int i, taglpad, tagiconw = 0, occ = 0, urg = 0;
 	Client *c;
+	const Client *tagclients[LENGTH(tags)] = {0};
+	const char *tag;
+	char tagbuf[64];
+	Bool taghasicon;
 
 	if (!m->showbar)
 		return;
@@ -724,13 +730,57 @@ drawbar(Monitor *m)
 		occ |= c->tags;
 		if (c->isurgent)
 			urg |= c->tags;
+
+		for (i = 0; i < LENGTH(tags); i++) {
+			if (!tagclients[i] && c->tags & (1<<i)) {
+				tagclients[i] = c;
+			}
+		}
 	}
+
 	x = 0;
 	for (i = 0; i < LENGTH(tags); i++) {
-		w = TEXTW(tags[i]);
+		tag = tags[i];
+		taghasicon = tagclients[i] && tagclients[i]->icon;
+		tagiconw = 0;
+
+		if (taghasicon) {
+			if (overwritetag) {
+				tagiconw = tagclients[i]->icw;
+				tag = "";
+			} else {
+				tagiconw = tagclients[i]->icw + ICONSPACING;
+				if (tagiconatstart) {
+					snprintf(tagbuf, sizeof(tagbuf), "%s%s", tagiconsep, tag);
+				} else {
+					snprintf(tagbuf, sizeof(tagbuf), "%s%s", tag, tagiconsep);
+				}
+				tag = tagbuf;
+			}
+		}
+
+		w = TEXTW(tag);
+		tagw[i] = w += tagiconw;
+		taglpad = lrpad / 2;
+		if (!(overwritetag && taghasicon) && tagiconatstart) {
+			taglpad += tagiconw;
+		}
+
 		drw_setscheme(drw, scheme[m->tagset[m->seltags] & 1 << i ? SchemeSel : SchemeNorm]);
-		drw_text(drw, x, 0, w, bh, lrpad / 2, tags[i], urg & 1 << i);
-		if (occ & 1 << i)
+		drw_text(drw, x, 0, w, bh, taglpad, tag, urg & 1 << i);
+
+		if (taghasicon) {
+			drw_pic(
+				drw,
+				tagiconatstart ? x + lrpad / 2 : x + TEXTW(tagbuf),
+				(bh - tagclients[i]->ich) / 2,
+				tagclients[i]->icw,
+				tagclients[i]->ich,
+				tagclients[i]->icon
+			);
+		}
+
+		if ((!taghasicon || !disabletagind) && (occ & 1 << i))
 			drw_rect(drw, x + boxs, boxs, boxw, boxw,
 				m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
 				urg & 1 << i);
@@ -743,8 +793,9 @@ drawbar(Monitor *m)
 	if ((w = m->ww - tw - x) > bh) {
 		if (m->sel) {
 			drw_setscheme(drw, scheme[m == selmon ? SchemeSel : SchemeNorm]);
-			drw_text(drw, x, 0, w, bh, lrpad / 2 + (m->sel->icon ? m->sel->icw + ICONSPACING : 0), m->sel->name, 0);
-			if (m->sel->icon) drw_pic(drw, x + lrpad / 2, (bh - m->sel->ich) / 2, m->sel->icw, m->sel->ich, m->sel->icon);
+			drw_text(drw, x, 0, w, bh, lrpad / 2 + (!disablewinicon && m->sel->icon ? m->sel->icw + ICONSPACING : 0), m->sel->name, 0);
+			if (!disablewinicon && m->sel->icon)
+				drw_pic(drw, x + lrpad / 2, (bh - m->sel->ich) / 2, m->sel->icw, m->sel->ich, m->sel->icon);
 			if (m->sel->isfloating)
 				drw_rect(drw, x + boxs, boxs, boxw, boxw, m->sel->isfixed, 0);
 		} else {
